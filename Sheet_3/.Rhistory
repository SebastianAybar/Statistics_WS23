#So wie ich verstanden habe moechte er hier ein histogramm und eine Verteilungsfunktion mit den richtigen class boundaries
werte <- c(568, 577, 581, 640, 641, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
table_werte
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / length(table_werte),
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / length(table_werte),
cum_freq = cumsum(rel_freq))
values <- c(568, 577, 581, 640, 641, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_values <- table(values)
tibble_values <- tibble(Werte = as.integer(names(table_values)),
absolute_Häufigkeit = as.integer(table_values),
relative_Häufigkeit = absolute_Häufigkeit / length(table_values),
kumulative_Häufigkeit = cumsum(relative_Häufigkeit))
View(tibble_values)
values <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_values <- table(values)
tibble_values <- tibble(Werte = as.integer(names(table_values)),
absolute_Häufigkeit = as.integer(table_values),
relative_Häufigkeit = absolute_Häufigkeit / length(table_values),
kumulative_Häufigkeit = cumsum(relative_Häufigkeit))
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / length(table_werte),
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / length(table_werte),
cum_freq = cumsum(rel_freq))
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / cumsum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
x <- sum(abs_freq)
x <- sum(tibble_distr_func$abs_freq)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(abs_freq),
cum_freq = cumsum(rel_freq))
x <- sum(tibble_distr_func$abs_freq)
x
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(abs_freq),
cum_freq = cumsum(rel_freq))
x
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / table_werte,
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = cumsum(rel_freq))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = round(abs_freq / sum(table_werte), 2),
cum_freq = round(cumsum(rel_freq), 2))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2)
View(tibble_distr_func)
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2)
View(tibble_distr_func)
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = round(abs_freq / sum(table_werte), 3),
cum_freq = round(cumsum(rel_freq), 2))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = round(abs_freq / sum(table_werte), 2),
cum_freq = round(cumsum(rel_freq), 2))
View(tibble_distr_func)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = (abs_freq / sum(table_werte),
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(values, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
ecdf_data <- ecdf(tibble_distr_func$values)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = names(table_werte),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
ecdf_data <- ecdf(tibble_distr_func$values)
x_labels <- c(500, 600, 700, 800, 900, 1000, 1100)
plot(ecdf_data)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = table_werte,
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
ecdf_daten <- ecdf(tibble_distr_func$values)
plot(ecdf_daten)
axis(1, at = x, labels = x_labels)
values <- c(568, 577, 581, 640, 641, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_values <- table(values)
tibble_values <- tibble(Werte = as.integer(names(table_values)),
absolute_Häufigkeit = as.integer(table_values),
relative_Häufigkeit = absolute_Häufigkeit / length(table_values),
kumulative_Häufigkeit = cumsum(relative_Häufigkeit))
ecdf_data <- ecdf(tibble_values$Werte)
plot(ecdf_data, main = "Empirische kumulative Verteilungsfunktion (ECDF)",
xlab = "Werte",
ylab = "kumulative Häufigkeit")
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
ecdf_daten <- ecdf(tibble_distr_func$values)
plot(ecdf_daten)
x_labels <- c(400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
axis(1, at = x, labels = x_labels)
axis(1, labels = x_labels)
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Erstellen Sie einen einfachen Streudiagrammplot (Scatterplot)
plot(x, y, main = "Beispielplot", xlab = "X-Werte", ylab = "Y-Werte")
# Bestimmen Sie die Werte auf der x-Achse
custom_x_labels <- c("A", "B", "C", "D", "E")  # Benutzerdefinierte Beschriftungen
axis(1, at = x, labels = custom_x_labels)
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
axis(1, at = new_class_boundaries)
new_class_boundaries <- c(500, 600, 900, 1000, 1400)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
axis(1, at = new_class_boundaries)
values <- c(568, 577, 581, 640, 641, 645, 657, 673, 696, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_values <- table(values)
tibble_values <- tibble(Werte = as.integer(names(table_values)),
absolute_Häufigkeit = as.integer(table_values),
relative_Häufigkeit = absolute_Häufigkeit / length(table_values),
kumulative_Häufigkeit = cumsum(relative_Häufigkeit))
ecdf_data <- ecdf(tibble_values$Werte)
plot(ecdf_data, main = "Empirische kumulative Verteilungsfunktion (ECDF)",
xlab = "Werte",
ylab = "kumulative Häufigkeit")
#Compute using the cumulative frequency distribution the proportion of response times
less_equal_800 <- tibble_values %>% filter(Werte <= 800)
ecdf_less_equal_800 <- ecdf(less_equal_800$Werte)
plot(ecdf_less_equal_800)
grater_than_725 <- tibble_values %>% filter(Werte >= 725)
greater_and_less <- tibble_values %>% filter(Werte >= 642 & Werte <= 777)
equal_696 <- tibble_values %>% filter(Werte == 696)
#Ist das so gemeint gewesen?
#Hier habe ich wiederholt was bei Aufgabe 2a gefragt ist da hier nach "draw the distribution function" gefragt ist.
#So wie ich verstanden habe moechte er hier ein histogramm und eine Verteilungsfunktion mit den richtigen class boundaries
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
ecdf_daten <- ecdf(tibble_distr_func$values)
plot(ecdf_daten)
x_labels <- c(400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
#Histogramm
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
axis(1, at = new_class_boundaries)
new_class_boundaries <- c(500, 600, 900, 1000, 1400)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
axis(1, at = new_class_boundaries)
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
axis(1, at = class_boundaries)
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100, 1200)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
axis(1, at = class_boundaries)
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
axis(1, at = class_boundaries)
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
x <- c(500, 550, 600, 700, 800, 900, 1000, 1100)
axis(1, at = class_boundaries)
axis(1, at = x)
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
library("tidyverse")
library("tidyr")
library("dplyr")
library("nycflights13")
datasets <- tibble(Number_1 = integer(),
Number_2 = integer(),
Number_3 = integer(),
Number_4 = integer(),
Number_5 = integer())
View(datasets)
datasets <- datasets %>% add_row(rnorm(5, mean = 10, sd = 2))
datasets <- datasets %>% mutate(rnorm(5, mean = 10, sd = 2))
#Aufgabe 2.1
#Make up data sets with 5 numbers each that have:
#(a) the same mean but different standard deviations.
data_a <- rnorm(5, mean = 10, sd = 2)
data_a
#Aufgabe 2.1
#Make up data sets with 5 numbers each that have:
#(a) the same mean but different standard deviations.
data_a <- c(rnorm(5, mean = 10, sd = 2))
data_a
data_1 <- rnorm(5, mean = 10, sd = 2)
data_2 <- rnorm(5, mean = 10, sd = 8)
tab_data <- tibble(num_1 = double(),
num_2 = double())
View(tab_data)
tab_data_fill <- tab_data %>% add_row(data_1)
data_1 <- rnorm(5, mean = 10, sd = 2)
data_2 <- rnorm(5, mean = 10, sd = 8)
tab_data <- tibble(num_1 = double(),
num_2 = double(),
num_3 = double(),
num_3 = double(),
num_3 = double())
tab_data_fill <- tab_data %>% add_row(data_1)
tab_data_fill <- tab_data %>% add_row(num_1:num_5 = data1[1:5])
tab_data_fill <- tab_data %>%
add_row(num_1 = data_1[1], num_2 = data_1[2], num_3 = data_1[3], num_4 = data_1[4], num_5 = data_1[5]) %>%
add_row(num_1 = data_2[1], num_2 = data_2[2], num_3 = data_2[3], num_4 = data_2[4], num_5 = data_2[5])
View(tab_data)
data_1 <- rnorm(5, mean = 10, sd = 2)
data_2 <- rnorm(5, mean = 10, sd = 8)
tab_data <- tibble(num_1 = double(),
num_2 = double(),
num_3 = double(),
num_4 = double(),
num_5 = double())
View(tab_data)
tab_data_fill <- tab_data %>%
add_row(num_1 = data_1[1], num_2 = data_1[2], num_3 = data_1[3], num_4 = data_1[4], num_5 = data_1[5]) %>%
add_row(num_1 = data_2[1], num_2 = data_2[2], num_3 = data_2[3], num_4 = data_2[4], num_5 = data_2[5])
View(tab_data_fill)
#So wie ich verstanden habe moechte er hier ein histogramm und eine Verteilungsfunktion mit den richtigen class boundaries
werte <- c(568, 577, 581, 640, 641, 645, 645, 657, 673, 673, 696, 703, 703, 703, 703, 720, 728, 729, 777, 808, 824, 825, 865, 875, 1007)
table_werte <- table(werte)
tibble_distr_func <- tibble(values = as.integer(names(table_werte)),
abs_freq = as.integer(table_werte),
rel_freq = abs_freq / sum(table_werte),
cum_freq = round(cumsum(rel_freq), 2))
class_boundaries <- c(500, 600, 700, 800, 900, 1000, 1100)
hist_data <- hist(werte, breaks = class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "Orange")
new_class_boundaries <- c(500, 600, 900, 1000, 1200)
hist_data <- hist(werte, breaks = new_class_boundaries,
xlab = "Werte",
ylab = "Frequency",
col = "blue")
data_1 <- rnorm(5, mean = 10, sd = 2)
data_2 <- rnorm(5, mean = 10, sd = 8)
tidy_data <- tibble(data_1 = double(),
data_2 = double())
View(tidy_data)
tidy_data <- tibble(data_1 = rnorm(5, mean = 10, sd = 2),
data_2 = rnorm(5, mean = 10, sd = 2))
View(tidy_data)
mean_data_1 <- mean(tidy_data$data_1)
mean_data_1
tidy_data <- tibble(data_1 = rnorm(5, mean = 10, sd = 2),
data_2 = rnorm(5, mean = 10, sd = 2))
mean_data_1 <- mean(tidy_data$data_1)
mean_data_1
sd_data_1 <- sd(tidy_data$data_1)
sd_data_1
df <- tibble(year = as.double(c(1, 2, 3, 4, 5)),
annual_return = c(1.13, 1.22, 1.12, 0.95, 0.87),
value = cumproduct(c(1000, 1.13, 1.22, 1.12, -1.05, -1.13)))
library("tidyverse")
library("tidyr")
library("dplyr")
library("nycflights13")
df <- tibble(year = as.double(c(1, 2, 3, 4, 5)),
annual_return = c(1.13, 1.22, 1.12, 0.95, 0.87),
value = cumprod(c(1000, 1.13, 1.22, 1.12, -1.05, -1.13)))
#(a) Compute the value after each of the five years.
df <- tibble(year = as.double(c(1, 2, 3, 4, 5, 6)),
annual_return = c(1.13, 1.22, 1.12, 0.95, 0.87),
value = cumprod(c(1000, 1.13, 1.22, 1.12, -1.05, -1.13)))
df <- tibble(year = as.double(c(0, 1, 2, 3, 4, 5)),
annual_return = c(1.13, 1.22, 1.12, 0.95, 0.87),
value = cumprod(c(1000, 1.13, 1.22, 1.12, 0.95, 0.87)))
df <- tibble(year = as.double(c(0, 1, 2, 3, 4, 5)),
annual_return = c(1, 1.13, 1.22, 1.12, 0.95, 0.87),
value = cumprod(c(1000, 1.13, 1.22, 1.12, 0.95, 0.87)))
View(df)
#(a) Compute the value after each of the five years.
df <- tibble(year = as.double(c(0, 1, 2, 3, 4, 5)),
annual_return = c(1, 1.13, 1.22, 1.12, 0.95, 0.87),
value = round(cumprod(c(1000, 1.13, 1.22, 1.12, 0.95, 0.87)), 2))
View(df)
#Compute the annual rate of return.
#Use the geometric mean
cump_prod <- cumprod(c(1000, 1.13, 1.22, 1.12, 0.95, 0.87))
cump_prod
cum_prod <- cumprod(c(1.13, 1.22, 1.12, 0.95, 0.87))
cump_prod
cum_prod <- cumprod(c(1.13, 1.22, 1.12, 0.95, 0.87))
cump_prod
cum_prod <- cumprod(c(1.13, 1.22, 1.12, 0.95, 0.87))
cump_prod
cum_prod <- cumprod(c(1.13, 1.22, 1.12, 0.95, 0.87))
cum_prod
cum_prod <- sqrt(cumprod(c(1.13, 1.22, 1.12, 0.95, 0.87)))
cum_prod
cum_prod <- prod(vec)
vec <- c(1.13, 1.22, 1.12, 0.95, 0.87)
cum_prod <- prod(vec)
cum_prod
cum_prod <- prod(vec)^(1/lenght(vec))
cum_prod <- prod(vec)^(1/length(vec))
cum_prod
vec <- c(0.13, 0.22, 0.12, -0.05, -0.13)
cum_prod <- prod(vec)^(1/length(vec))
cum_prod
cum_prod <- round(prod(vec)^(1/length(vec)), 2)
cum_prod
vec <- c(1.13, 1.22, 1.12, 0.95, 0.87)
cum_prod <- round(prod(vec)^(1/length(vec)), 2)
cum_prod
#Aufgabe 4
obs <- tibble(Number = c(1:8), abs_freq = c(5, 4, 1, 7, 2, 3, 1, 2))
View(obs)
vec_for_geo_mean <- obs$Number^obs$abs_freq
vec_for_geo_mean
vec_for_geo_mean <- obs$Number^obs$abs_freq %>%
prod(vec_for_geo_mean)
vec_for_geo_mean
obs <- tibble(Number = c(1:8), abs_freq = c(5, 4, 1, 7, 2, 3, 1, 2))
vec_for_geo_mean <- obs$Number^obs$abs_freq %>%
prod(vec_for_geo_mean)^(1/length(vec_for_geo_mean))
obs <- tibble(Number = c(1:8), abs_freq = c(5, 4, 1, 7, 2, 3, 1, 2))
vec_for_geo_mean <- obs$Number^obs$abs_freq %>%
prod(vec_for_geo_mean)^(1/sum(obs$abs_freq))
obs <- tibble(Number = c(1:8), abs_freq = c(5, 4, 1, 7, 2, 3, 1, 2))
vec_for_geo_mean <- obs$Number^obs$abs_freq
geometric_mean <- prod(vec_for_geo_mean)^(1/sum(obs$abs_freq))
geometric_mean
#Test
vec <- c(1,1,1,1,1,2,2,2,2,3,4,4,4,4,4,4,4,5,5,6,6,6,7,8,8)
vec
cum_prod <- prod(vec)
geometric_mean <- cum_prod^(1/length(vec))
geometric_mean
View(obs)
