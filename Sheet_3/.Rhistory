#Aufgabe 5
n <- 20
random_sample <- sample(1:20, size = n, replace = TRUE)
n <- 20
random_sample <- sample(1:20, size = n, replace = TRUE)
ecdf_random_sample <- ecdf(random_sample)
ecdf_random_sample
plot(ecdf_random_sample)
percentile = 0.25
index <- percentile * lenght(random_sample)
index <- percentile * length(random_sample)
random_sample
sorted_random_sample <- sort(random_sample)
percentile = 0.25
index <- percentile * length(sorted_random_sample)
sorted_random_sample
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
sorted_random_sample
n <- 20
random_sample <- as.double(sample(1:20, size = n, replace = TRUE))
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- as.double(percentile) * as.double(length(sorted_random_sample))
sorted_random_sample
sorted_random_sample <- sort(random_sample)
percentile = as.double(0.30)
index <- as.double(percentile) * as.double(length(sorted_random_sample))
sorted_random_sample
index
random_sample
random_sample <- sample(as.double(1:20), size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile = as.double(0.30)
index <- as.double(percentile) * as.double(length(sorted_random_sample))
n <- 20
random_sample <- sample(as.double(1:20), size = n, replace = TRUE)
random_sample
sorted_random_sample <- sort(random_sample)
sorted_random_sample
sorted_random_sample <- sort(random_sample)
percentile = as.double(0.30)
index <- as.double(percentile) * as.double(length(sorted_random_sample))
index
20/30
print(as.double(percentile))
print(as.double(length(sorted_random_sample)))
print(percentile*20)
n <- 20
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (seiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile <- quantile(sorted_random_sample, c(0.25, 0.5, 0.75))
#Funktion aus Library
quantile <- quantile(sorted_random_sample, 0.30)
quantile
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quant <- quantile(sorted_random_sample, 0.30)
quant
#ohne Funktion
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
my.quantile <- function(x,p){
xsort <- sort(x)
return(xsort[ceiling(length(x)*p)])
}
quantile_aus_function <- my.quantile(random_sample, 0.30)
print(length(sorted_random_sample)-1)*percentile+1
print(length(sorted_random_sample)-1)*percentile+1
print(length(sorted_random_sample)-1 * percentile + 1)
library("tidyverse")
library("tidyr")
library("dplyr")
library("nycflights13")
#Generate a random sample of size n from 1, 2, ..., 20
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
#ohne Funktion
sorted_random_sample <- sort(random_sample)
print(length(sorted_random_sample)-1 * percentile + 1)
percentile = 0.30
print(length(sorted_random_sample)-1 * percentile + 1)
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
quantile
my.quantile <- function(x,p){
xsort <- sort(x)
return(xsort[ceiling(length(x)*p)])
}
quantile_aus_function <- my.quantile(random_sample, 0.30)
quantile_aus_function
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
quantile_aus_libr
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
#(a) and determine the Empirical Distribution Function
ecdf_random_sample <- ecdf(random_sample)
plot(ecdf_random_sample)
#(b) Determine a R function to find quantile according to the definition given in the lecture.
#Funktion
my.quantile <- function(x,p){
xsort <- sort(x)
return(xsort[ceiling(length(x)*p)])
}
quantile_aus_function <- my.quantile(random_sample, 0.30)
#ohne Funktion
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
#(a) and determine the Empirical Distribution Function
ecdf_random_sample <- ecdf(random_sample)
plot(ecdf_random_sample)
#(b) Determine a R function to find quantile according to the definition given in the lecture.
#Funktion
my.quantile <- function(x,p){
xsort <- sort(x)
return(xsort[ceiling(length(x)*p)])
}
quantile_aus_function <- my.quantile(random_sample, 0.30)
#ohne Funktion
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
#(a) and determine the Empirical Distribution Function
ecdf_random_sample <- ecdf(random_sample)
plot(ecdf_random_sample)
#(b) Determine a R function to find quantile according to the definition given in the lecture.
#Funktion
my.quantile <- function(x,p){
xsort <- sort(x)
return(xsort[ceiling(length(x)*p)])
}
quantile_aus_function <- my.quantile(random_sample, 0.30)
#ohne Funktion
sorted_random_sample <- sort(random_sample)
percentile = 0.30
index <- percentile * length(sorted_random_sample)
fraction_index <- index - floor(index)
quantile <- floor(sorted_random_sample[index]) + (ceiling(sorted_random_sample[index]) - floor(sorted_random_sample[index])) * fraction_index
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
quantile
quantile_aus_function
print(length(sorted_random_sample))
np_odd_or_even <- length(sorted_random_sample) * percentile
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
index <- length(sorted_random_sample) * percentile
quantile_natural_number <- 0.5 * (sorted_random_sample[index] + sorted_random_sample[index+1])
quantile_natural_number
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
quantile_fractional_number <- sorted_random_sample[index+1]
quantile_fractional_number
random_sample <- sample(1:20, size = n, replace = TRUE)
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
sorted_random_sample
index <- length(sorted_random_sample) * percentile
quantile_fractional_number <- sorted_random_sample[index+1]
quantile_fractional_number
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
index <- length(sorted_random_sample) * percentile
quantile_fractional_number <- sorted_random_sample[index+1]
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_fractional_number
quantile_aus_libr
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30, type = 1)
quantile_aus_libr
calc.quantile <- function(vector, percentile){
sorted_vector <- sort(vector)
index <- length(vector) * percentile
if(index %% 1 != 0){
return(vector[index+1])
} else {
return(0.5 * (vector[index] + vector[index+1]))
}
}
quantile_aus_eigener_funktion <- calc.quantile(vector = sorted_random_sample, percentile = 0.30)
quantile_aus_eigener_funktion
library("tidyverse")
library("tidyr")
library("dplyr")
calc.quantile <- function(vector, percentile){
sorted_vector <- sort(vector)
index <- length(vector) * percentile
if(index %% 1 != 0){
return(vector[index+1])
} else {
return(0.5 * (vector[index] + vector[index+1]))
}
}
quantile_aus_eigener_funktion <- calc.quantile(vector = sorted_random_sample, percentile = 0.30)
View(calc.quantile)
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30, type = 1)
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30, type = 1)
quantile_aus_libr
#nach der Formel im Skript
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
quantile_aus_libr
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30, type = 7)
quantile_aus_libr
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
n <- 25
random_sample <- sample(1:20, size = n, replace = TRUE)
sorted_random_sample <- sort(random_sample)
percentile <- 0.30
quantile_aus_libr
#Funktion aus Library
quantile_aus_libr <- quantile(sorted_random_sample, 0.30)
quantile_aus_libr
q.tab<-tibble(obs=x,
obs.ordered=sort(x),
prop.n=(1:s.size)/s.size,
prop.n.minus.1=(0:(s.size-1))/(s.size-1))
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(
obs = x
) %>%
count(obs) %>%
mutate(
cum.rel.freq = cumsum(n)/sum(n)
)
View(emp.dist)
# R quantile of type 7 of order 0, 0.5, ..., 1
plot(y=sort(x), x=(0:(s.size-1))/(s.size-1),
type="b", col = "black",
ylim=c(0,22), xlim=c(-0.1,1.1),
xlab="p", ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
points(x=seq(0,1, by=0.05), y=quantile(x,prob=seq(0,1, by=0.05)), col="red")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
points(x=seq(0,1, by=0.05), y=quantile(x,prob=seq(0,1, by=0.05)), col="red")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1)),
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1)),
# R quantile of type 7 of order 0, 0.5, ..., 1
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles"))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
x
print(sort(x))
sample_size <- 10
random_sample <- sample(x = as.double(1:20), size = sample_size, replace = TRUE)
sample_size <- 10
random_sample <- sample(x = as.double(1:20), size = sample_size, replace = TRUE)
random_sample
random_sample <- sample(x = seq(from = 1, to = 20, by = 1), size = sample_size, replace = TRUE)
random_sample
random_sample <- sample(x = seq(from = 1, to = 20, by = 0.1), size = sample_size, replace = TRUE)
random_sample
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1), size = sample_size, replace = TRUE))
sorted_random_sample
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
View(emp.dist)
sample_size <- 10
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1),
size = sample_size,
replace = TRUE))
tibble_sample <- tibble(values = integer(),
abs_freq = integer(),
cum_freq = double())
View(tibble_sample)
tibble$values <- sorted_random_sample
View(tibble)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample,
abs_freq = n(sorted_random_sample))
tibble_sample <- tibble(values = sorted_random_sample)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>% count()
View(tibble_sample)
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs)
emp.dist
sample_size <- 10
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1),
size = sample_size,
replace = TRUE))
tibble_sample <- tibble(values = sorted_random_sample) %>% count(values)
tibble_sample
sorted_random_sample
table_sample <- table(sorted_random_sample)
table_sample
tibble_sample <- tibble(obs <- as.integer(names(table_werte)),
abs_freq <- as.integer(table_werte),
cum_freq <- cumsum(table_werte))
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs <- as.integer(names(table_sample)),
abs_freq <- as.integer(table_sample),
cum_freq <- cumsum(table_sample))
View(tibble_sample)
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
cum_freq = cumsum(table_sample))
View(tibble_sample)
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
rel_freq = abs_freq/sum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample)
View(tibble_sample)
View(emp.dist)
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
View(emp.dist)
tibble_sample <- tibble(values = sorted_random_sample) %>%
mutate(count(values))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_values$n/sum(n))
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
tibble_sample <- tibble_sample %>%
mutate(rel_freq = tibble_values$n/sum(n))
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_sample$n/sum(n))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_sample$n/sum(n)) %>%
mutate(cum_freq = cumsum(rel_freq))
View(tibble_sample)
plot(y = sorted_random_sample)
ecdf(tibble$obs)
ecdf(tibble_sample$obs)
View(tibble_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
rel_freq = abs_freq/sum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_sample)
ecdf(tibble_sample$obs)
ecdf_data <- ecdf(tibble_sample$obs)
plot(ecdf_data)
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1)),
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
