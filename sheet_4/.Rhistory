xlim = c(0,10),
ylim = c(0,10))
cov(x = x, y = y)
cor(x = x, y = y)
cov <- cov(x = x, y = y)
cor <- cor(x = x, y = y)
#(b)
cov <- cov(x = x, y = y)
#(d)
linear_regression <- lm(x ~ y)
plot(linear_regression)
y = y,
linear_regression <- lm(x ~ y)
plot(x = x, y = y)
abline(linear_regression)
linear_regression <- lm(x ~ y)
summary(linear_regression)
plot(x = x, y = y)
abline(linear_regression)
linear_regression <- lm(x ~ y)
summary(linear_regression)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
# a) Draw a scatterplot of the data.
plot(x = results$time,
y = results$score,
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# applying ggplot()
ggplot(data = results) +
geom_point(mapping = aes(x=time, y=score)) +
ggtitle("relationship: time spent in exercises and score") +
theme_bw()
# Compute the covariance and the coefficient of correlation.
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
# Compute the regression line Y=a+bX.(X = time, Y = score)
reg1 <- lm(results$score~results$time)
# coefficients of the line
a <- reg1$coefficients[1]
b <- reg1$coefficients[2]
a;b
# add the residuals and the fitted values to the tibble results
results <- results %>%
mutate(res.scores = reg1$residuals,
pred.scores = reg1$fitted.values)
results
# Find the predicted score for someone with 8 units of
# time spent in exercises.
pred_test_score <- a+b*8
pred_test_score #  4.204082
plot(x = results$time,
y = results$score,
xlim = c(-1,13),
ylim = c(-1,10),
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# add the regression line
abline(reg1, col="blue")
plot(x = results$time,
y = results$score,
xlim = c(-1,13),
ylim = c(-1,10),
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# add the regression line
abline(reg1, col="blue")
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
plot(x = results$time,
y = results$score,
xlim = c(-1,13),
ylim = c(-1,10),
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# add the regression line
abline(reg1, col="blue")
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
# Compute the regression line Y=a+bX.(X = time, Y = score)
reg1 <- lm(results$score~results$time)
plot(x = results$time,
y = results$score,
xlim = c(-1,13),
ylim = c(-1,10),
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# add the regression line
abline(reg1, col="blue")
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
linear_regression <- lm(x ~ y)
summary(linear_regression)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
linear_regression <- lm(x ~ y)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
linear_regression <- lm(x ~ y)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
reg1 <- lm(results$score~results$time)
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
reg1 <- lm(results$score~results$time)
# coefficients of the line
a <- reg1$coefficients[1]
b <- reg1$coefficients[2]
a <- linear_regression$coefficients[1]
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
View(linear_regression)
linear_regression
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
# Compute the regression line Y=a+bX.(X = time, Y = score)
reg1 <- lm(results$score~results$time)
# coefficients of the line
a <- reg1$coefficients[1]
b <- reg1$coefficients[2]
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
#(a)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
#(b)
positive
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
#(a)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
#(b)
#positive
#(c)
cov <- cov(x = x, y = y)
cor <- cor(x = x, y = y)
#(d) y = ax + b
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
#wir speichern uns die Koeffizienten der Regressionsgeradengleichung y = bx + a
#a ist die Steigung der Regressionsgeraden und b der Y-Achsenabschnitt
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
#(e)
y <- b * 8 + a
#(e)
y <- a + b * 8
measures <- tibble(time_spend = x,
exam_score = y) %>%
summarise(cov = cov,
cor = cor,
residual_scores = linear_regression$residuals,
predicted_values = linear_regression$fitted.values)
View(measures)
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
# a) Draw a scatterplot of the data.
plot(x = results$time,
y = results$score,
main="time spent in exercises and score",
xlab="time spent", ylab="score")
# applying ggplot()
ggplot(data = results) +
geom_point(mapping = aes(x=time, y=score)) +
ggtitle("relationship: time spent in exercises and score") +
theme_bw()
# Compute the covariance and the coefficient of correlation.
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
# Compute the regression line Y = a + bX .(X = time, Y = score)
reg1 <- lm(results$score~results$time)
# coefficients of the line
a <- reg1$coefficients[1]
b <- reg1$coefficients[2]
a;b
# add the residuals and the fitted values to the tibble results
results <- results %>%
mutate(res.scores = reg1$residuals,
pred.scores = reg1$fitted.values)
results
View(results)
View(results)
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
View(results)
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
View(results)
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
View(results)
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
View(results)
data <- tibble(time_spend = c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12),
exam_score = c( 5, 5, 4,  6,  7,  5, 3,  4, 5,  7, 4, 2,  8))
data <- tibble(time_spend = c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12),
exam_score = c( 5, 5, 4,  6,  7,  5, 3,  4, 5,  7, 4, 2,  8))
View(data)
data <- tibble(time_spend = c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12),
exam_score = c( 5, 5, 4,  6,  7,  5, 3,  4, 5,  7, 4, 2,  8))
measures <- summarise(covar = cov(data$time_spend, data$exam_score),
correl = cor(data$time_spend, data$exam_score))
data <- tibble(time_spend = c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12),
exam_score = c( 5, 5, 4,  6,  7,  5, 3,  4, 5,  7, 4, 2,  8))
measures %>% summarise(covar = cov(data$time_spend, data$exam_score),
correl = cor(data$time_spend, data$exam_score))
data <- tibble(time_spend = c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12),
exam_score = c( 5, 5, 4,  6,  7,  5, 3,  4, 5,  7, 4, 2,  8))
data %>% summarise(covar = cov(data$time_spend, data$exam_score),
correl = cor(data$time_spend, data$exam_score))
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
#(a)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
#(b)
#positive
#(c)
cov <- cov(x = x, y = y)
cor <- cor(x = x, y = y)
#(d) y = ax + b
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
#wir speichern uns die Koeffizienten der Regressionsgeradengleichung y = a + bx
#a ist die Steigung der Regressionsgeraden und b der Y-Achsenabschnitt
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
#(e)
y <- a + b * 8
data <- tibble(time_spend = x,
exam_score = y,
residual_values = linear_regression$residuals,
predicted_scores = linear_regression$fitted.values)
View(data)
#Aufgabe 1.2.
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8)
#(a)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
#(b)
#positive
#(c)
cov <- cov(x = x, y = y)
cor <- cor(x = x, y = y)
#(d) y = ax + b
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
#wir speichern uns die Koeffizienten der Regressionsgeradengleichung y = a + bx
#a ist die Steigung der Regressionsgeraden und b der Y-Achsenabschnitt
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
data <- tibble(time_spend = x,
exam_score = y,
residual_values = linear_regression$residuals,
predicted_scores = linear_regression$fitted.values)
View(data)
results <-
tibble(
time =  c(10,9,9,11,10,10,6,10,8,12,9,4,12),
score = c(5, 5,4,6, 7, 5, 3,4, 5,7, 4,2,8)
)
# Compute the regression line Y = a + bX .(X = time, Y = score)
reg1 <- lm(results$score~results$time)
results %>%
summarise("covariance" = cov(time,score),
"coeff. of correlation" = cor(time,score))
results <- results %>%
mutate(res.scores = reg1$residuals,
pred.scores = reg1$fitted.values)
results
View(results)
# add the regression line
abline(reg1, col="blue")
# add line segments
segments(8,pred_test_score,0,pred_test_score)
segments(8,pred_test_score,0,pred_test_score)
pred_test_score <- a+b*8
pred_test_score #  4.204082
segments(8,pred_test_score,0,pred_test_score)
segments(8,0,8,pred_test_score)
abline(h=0)
abline(v=0)
#(g)
# Soll das den
B <- cor(results$time,results$score)^2
x <- c(10, 9, 9, 11, 10, 10, 6, 10, 8, 12, 9, 4, 12, 20)
y <- c(5, 5, 4, 6, 7, 5, 3, 4, 5, 7, 4, 2, 8, 0)
#(a)
plot(x = x,
y = y,
xlim = c(0,10),
ylim = c(0,10))
#(b)
#positive
#(c)
cov <- cov(x = x, y = y)
cor <- cor(x = x, y = y)
#(d) y = ax + b
linear_regression <- lm(y ~ x)
plot(x = x, y = y,
xlim = c(0,12),
ylim = c(0,12))
abline(linear_regression)
#wir speichern uns die Koeffizienten der Regressionsgeradengleichung y = a + bx
#a ist die Steigung der Regressionsgeraden und b der Y-Achsenabschnitt
a <- linear_regression$coefficients[1]
b <- linear_regression$coefficients[2]
#(e)
#y <- a + b * 8
#Tibble mit  den restlichen Werten und den fitted Values
data <- tibble(time_spend = x,
exam_score = y,
residual_values = linear_regression$residuals,
predicted_scores = linear_regression$fitted.values)
#(g)
#Bestimmtheitsmass/Determinationskoeffizient
B <- cor(results$time,results$score)^2
library("tidyverse")
library("tidyr")
library("dplyr")
library("ggplot2")
data <- tibble(cafe = c(seq(1,5,1)),
X = c(3,8,7,9,5),
Y = c(6,7,10,8,4))
View(data)
data <- tibble(cafe = c(seq(1,5,1)),
X = c(3,8,7,9,5),
Y = c(6,7,10,8,4))
View(data)
spearman_cor <- cor(X, Y, method = "spearman")
spearman_cor <- cor(data$X, data$Y, method = "spearman")
fgabe 2.1.
tab <- matrix(c(40,10,20,10,10,10),nrow=3,ncol=2,byrow=TRUE)
tab
View(tab)
data <- tibble(Attendance = c("Over 70%", "30%-70%", "Under 30%"),
Pass = c(40,20,10),
Fail = c(10,10,10))
data <- tibble(Attendance = c("Over 70%", "30%-70%", "Under 30%"),
Pass = c(40,20,10),
Fail = c(10,10,10))
x_squared <- chisq.test(data$Pass, data$Fail)
chi_squared <- chisq.test(data)$expected
data <- tibble(Pass = c(40,20,10),
Fail = c(10,10,10))
chi_squared <- chisq.test(data)$expected
View(data)
View(chi_squared)
View(chi_squared)
View(data)
View(chi_squared)
stats <- chisq.test(data)$statistic
chisq.test(data)$statistic
chisq.test(data)$expected
chi_squared <- sum((expected_values-values)^2/expected_values)
values <- tibble(Pass = c(40,20,10),
Fail = c(10,10,10))
#compute expected values
expected_values <- chisq.test(values)$expected
#compute chi squared
chi_squared <- chisq.test(values)$statistic
chi_squared <- sum((expected_values-values)^2/expected_values)
values <- tibble(Pass = c(40,20,10),
Fail = c(10,10,10))
#compute expected values
expected_values <- chisq.test(values)$expected
chi_squared <- sum((expected_values-values)^2/expected_values)
#compute chi squared
chi_squared <- chisq.test(values)$statistic
chi_squared <- sum((expected_values-values)^2/expected_values)
View(values)
#compute contigency coefficiant C
C <- (chi_squared^2)/(rowsum(values$Pass)+rowsum(values$Fail)+chi_squared^2)
#compute contigency coefficiant C
C <- (chi_squared^2)/(rowsum(values$Pass)+rowsum(values$Fail)+(chi_squared^2))
#compute contigency coefficiant C
C <- (chi_squared^2)/(sum(values$Pass)+sum(values$Fail)+(chi_squared^2))
#compute contigency coefficiant C
C <- ((chi_squared^2)/(sum(values$Pass)+sum(values$Fail)+chi_squared^2))^0.5
#compute contigency coefficiant C
C <- (chi_squared/(sum(values$Pass)+sum(values$Fail)+chi_squared))^0.5
#compute contigency coefficiant C
C <- (chi_squared/sum(values))^0.5
#compute contigency coefficiant C
C <- ( chi_squared / chi_squared + sum(values) )^0.5
#compute contigency coefficiant C
C <- (chi_squared/(sum(values$Pass)+sum(values$Fail)+chi_squared))^0.5
#compute contigency coefficiant C
C <- (chi_squared/(sum(values$Pass)+sum(values$Fail)+chi_squared))^0.5
tab <- matrix(c(40,10,20,10,10,10),nrow=3,ncol=2,byrow=TRUE)
# or
chisq.test(tab)$expected
tab <- matrix(c(40,10,20,10,10,10),nrow=3,ncol=2,byrow=TRUE)
tab
# indifference table
# indifference table
ind_tab <-
matrix(rowSums(tab),nrow=3,ncol=1)   %*%
matrix(colSums(tab),nrow=1,ncol=2) / sum(tab)
# or
chisq.test(tab)$expected
# computation of Chi^2, C and C_corr
chisq.test(tab)$statistic
# or
chi_2 <- sum((tab-ind_tab)^2/ind_tab)
chi_2 # 6.349206
C <- (chi_2/(chi_2+sum(tab)))^0.5
C # 0.2443389
C_korr <- ((min(2,3)/(min(2,3)-1)) *chi_2/(chi_2+sum(tab)))^0.5
C_korr #
values <- tibble(Pass = c(40,20,10),
Fail = c(10,10,10))
#compute expected values
expected_values <- chisq.test(values)$expected
#compute chi squared
chi_squared <- chisq.test(values)$statistic
chi_squared <- sum((expected_values-values)^2/expected_values)
#compute contigency coefficiant C
C <- (chi_squared/(sum(values$Pass)+sum(values$Fail)+chi_squared))^0.5
values <- tibble(Pass = c(40,20,10),
Fail = c(10,10,10))
#compute expected values
expected_values <- chisq.test(values)$expected
#compute chi squared
chi_squared <- chisq.test(values)$statistic
chi_squared <- sum((expected_values-values)^2/expected_values)
#compute contigency coefficiant C
C <- (chi_squared/(sum(values$Pass)+sum(values$Fail)+chi_squared))^0.5
#compute C corrected
C_corr <- C * (min(length(values$Pass), length(values$names))/)^0.5
#compute C corrected
C_stern <- min(length(values$Pass), ncol(values))
C_stern
C_corr <- C * (C_star/(C_star-1))^0.5
C_star <- min(length(values$Pass), ncol(values))
C_corr <- C * (C_star/(C_star-1))^0.5
