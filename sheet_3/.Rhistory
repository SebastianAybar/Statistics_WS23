col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
points(x=seq(0,1, by=0.05), y=quantile(x,prob=seq(0,1, by=0.05)), col="red")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1)),
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1)),
# R quantile of type 7 of order 0, 0.5, ..., 1
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles"))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1))
plot(y=sort(x))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
x
print(sort(x))
sample_size <- 10
random_sample <- sample(x = as.double(1:20), size = sample_size, replace = TRUE)
sample_size <- 10
random_sample <- sample(x = as.double(1:20), size = sample_size, replace = TRUE)
random_sample
random_sample <- sample(x = seq(from = 1, to = 20, by = 1), size = sample_size, replace = TRUE)
random_sample
random_sample <- sample(x = seq(from = 1, to = 20, by = 0.1), size = sample_size, replace = TRUE)
random_sample
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1), size = sample_size, replace = TRUE))
sorted_random_sample
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
View(emp.dist)
sample_size <- 10
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1),
size = sample_size,
replace = TRUE))
tibble_sample <- tibble(values = integer(),
abs_freq = integer(),
cum_freq = double())
View(tibble_sample)
tibble$values <- sorted_random_sample
View(tibble)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample,
abs_freq = n(sorted_random_sample))
tibble_sample <- tibble(values = sorted_random_sample)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>% count()
View(tibble_sample)
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs)
emp.dist
sample_size <- 10
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1),
size = sample_size,
replace = TRUE))
tibble_sample <- tibble(values = sorted_random_sample) %>% count(values)
tibble_sample
sorted_random_sample
table_sample <- table(sorted_random_sample)
table_sample
tibble_sample <- tibble(obs <- as.integer(names(table_werte)),
abs_freq <- as.integer(table_werte),
cum_freq <- cumsum(table_werte))
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs <- as.integer(names(table_sample)),
abs_freq <- as.integer(table_sample),
cum_freq <- cumsum(table_sample))
View(tibble_sample)
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
cum_freq = cumsum(table_sample))
View(tibble_sample)
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
rel_freq = abs_freq/sum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample)
View(tibble_sample)
View(emp.dist)
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
View(emp.dist)
tibble_sample <- tibble(values = sorted_random_sample) %>%
mutate(count(values))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_values$n/sum(n))
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values)
tibble_sample <- tibble_sample %>%
mutate(rel_freq = tibble_values$n/sum(n))
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_sample$n/sum(n))
View(tibble_sample)
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_sample$n/sum(n)) %>%
mutate(cum_freq = cumsum(rel_freq))
View(tibble_sample)
plot(y = sorted_random_sample)
ecdf(tibble$obs)
ecdf(tibble_sample$obs)
View(tibble_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
rel_freq = abs_freq/sum(abs_freq),
cum_freq = cumsum(rel_freq))
View(tibble_sample)
ecdf(tibble_sample$obs)
ecdf_data <- ecdf(tibble_sample$obs)
plot(ecdf_data)
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1)),
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
plot(ecdf_data)
plot(y=sorted_random_sample,
x=(0:(s.size-1))/(s.size-1))
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
library("tidyverse")
library("tidyr")
library("dplyr")
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
z(x, probs = seq(0,1, by=0.05), type = 1)
quantile(x, probs = seq(0,1, by=0.05), type = 1)
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
plot(y=sorted_random_sample,
x=(0:(n-1))/(n-1))
plot(y=sorted_random_sample,
x=(0:(n-1))/(n-1))
plot(y=sorted_random_sample,
x=(0:(sample_size-1))/(sample_size-1))
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
points(x=seq(0,1, by=0.05), y=quantile(x,prob=seq(0,1, by=0.05)), col="red")
plot(y=sorted_random_sample,
x=(0:(sample_size-1))/(sample_size-1))
plot(y=sorted_random_sample,
x=(0:(sample_size-1))/(sample_size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
sorted_random_sample
plot(y=sorted_random_sample,
x=(0:10))
plot(y=sorted_random_sample,
x=(0:1))
plot(y=sorted_random_sample,
x=(0:length(sorted_random_sample)))
x <- 0:(sample_size-1))/(sample_size-1)
x <- 0:(sample_size-1)/(sample_size-1)
x
plot(y=sorted_random_sample,
x=(0:(sample_size-1))/(sample_size-1))
plot(y=sorted_random_sample,
x=(0:(sample_size-1))/(sample_size-1),
type="b")
plot(y=1:20,
x=(0:(sample_size-1))/(sample_size-1),
type="b")
plot(y=1:10,
x=(0:(sample_size-1))/(sample_size-1),
type="b")
plot(y=1:10,
x=0:1,
type="b")
#ich plotte normal, denn fuer die lineare interpolation brauche ich die Obs auf der X-Achse. Oder?
plot(y=1:10,
x=1:10,
type="b")
plot(y=sorted_random_sample,
x=1:10,
type="b")
plot(y=sorted_random_sample,
x=0.11:1.00,
type="b")
plot(y=sorted_random_sample,
x=0:(sample_size-1)/(sample_size-1),
type="b")
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
s.size <- 10
x <- sample(1:20, size = s.size, replace = TRUE)
emp.dist <- tibble(obs = x) %>%
count(obs) %>%
mutate(cum.rel.freq = cumsum(n)/sum(n)
)
# R quantile of type 7 of order 0, 0.5, ..., 1
plot(y=sort(x),
x=(0:(s.size-1))/(s.size-1),
type="b",
col = "black",
ylim=c(0,22),
xlim=c(-0.1,1.1),
xlab="p",
ylab="p quantile",
main="quantiles type=7",
sub = "black = linear interpolation, red = type 7 quantiles")
x
x <- 0:(sample_size-1)/(sample_size-1)
x
sample_size <- 10
sorted_random_sample <- sort(sample(x = seq(from = 1, to = 20, by = 1),
size = sample_size,
replace = TRUE))
plot(y=sorted_random_sample,
x=0:(sample_size-1)/(sample_size-1),
type="b")
sorted_random_sample
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)), col = "red")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)), col = "red")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)), col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Nach dem plotten Punkte setzen
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)), col = "red")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample,col = "red"))
source("~/GitHub/Statistics_WS23/sheet_3/sheet_3.R")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = c(0.25, 0.5, 0.75, 1), col = "red"))
points(x = seq(0,1, by = 0.25),
y = quantile(sorted_random_sample, prob = c(0.25, 0.5, 0.75, 1), col = "red"))
points(x = seq(0.25,1, by = 0.25),
y = quantile(sorted_random_sample, prob = c(0.25, 0.5, 0.75, 1), col = "red"))
sorted_random_sample
points(x = seq(0.25,1, by = 0.25),
y = quantile(sorted_random_sample, prob = c(0.25, 0.5, 0.75, 1)), col = "red")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05), col = "red"))
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Nach dem plotten noch Punkte setzen
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
points(x = seq(0.25,1, by = 0.25),
y = quantile(sorted_random_sample, prob = c(0.25, 0.5, 0.75, 1)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Nach dem plotten noch Punkte setzen
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Nach dem plotten noch Punkte setzen
points(x = 0:(sample_size-1)/(sample_size-1),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
z
x
tibble_sample <- tibble(values = sorted_random_sample) %>%
count(values) %>%
mutate(rel_freq = tibble_sample$n/sum(n)) %>%
mutate(cum_freq = cumsum(rel_freq))
table_sample <- table(sorted_random_sample)
tibble_sample <- tibble(obs = as.integer(names(table_sample)),
abs_freq = as.integer(table_sample),
rel_freq = abs_freq/sum(abs_freq),
cum_freq = cumsum(rel_freq))
ecdf_data <- ecdf(tibble_sample$obs)
plot(ecdf_data)
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Wir fuegen nachtraeglich noch Punkte hinzu, welche das Type 7 Quantile des Samples in
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red",
type = b)
plot(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
type = "b",
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Wir fuegen nachtraeglich noch Punkte hinzu, welche das Type 7 Quantile des Samples in 5%
#Schritten darstellt. Wichtig ist hierbei das der vector der x-Achse gleich gross ist wie
#der Vector der Y-Achse denn wir brauchen ja immer einen x und einen y Wert
#type b im Diagram zeigt uns die lineare Interpolation und dadurch ist gut zu sehen dass
#das type=7-Quantile auf der linearen Interpolation basiert
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
type = "b",
col = "red")
plot(quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
type = "b",
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
points(quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
points(quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
type = "b",
col = "red")
plot(quantile(sorted_random_sample),
type = "b",
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Wir fuegen nachtraeglich noch Punkte hinzu, welche das Type 7 Quantile des Samples in 5%
#Schritten darstellt. Wichtig ist hierbei das der vector der x-Achse gleich gross ist wie
#der Vector der Y-Achse denn wir brauchen ja immer einen x und einen y Wert
#type b im Diagram zeigt uns die lineare Interpolation und dadurch ist gut zu sehen dass
#das type=7-Quantile auf der linearen Interpolation basiert.
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(quantile(sorted_random_sample),
type = "b",
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Wir fuegen nachtraeglich noch Punkte hinzu, welche das Type 7 Quantile des Samples in 5%
#Schritten darstellt. Wichtig ist hierbei das der vector der x-Achse gleich gross ist wie
#der Vector der Y-Achse denn wir brauchen ja immer einen x und einen y Wert
#type b im Diagram zeigt uns die lineare Interpolation und dadurch ist gut zu sehen dass
#das type=7-Quantile auf der linearen Interpolation basiert.
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(quantile(sorted_random_sample, probs = seq(0,1,0.05)),
type = "b",
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
#Wir fuegen nachtraeglich noch Punkte hinzu, welche das Type 7 Quantile des Samples in 5%
#Schritten darstellt. Wichtig ist hierbei das der vector der x-Achse gleich gross ist wie
#der Vector der Y-Achse denn wir brauchen ja immer einen x und einen y Wert
#type b im Diagram zeigt uns die lineare Interpolation und dadurch ist gut zu sehen dass
#das type=7-Quantile auf der linearen Interpolation basiert.
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
points(x = seq(0,1, by = 0.25),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.25)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
points(x = seq(0,1, by = 0.5),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.5)),
col = "red")
plot(y = sorted_random_sample,
x = 0:(sample_size-1)/(sample_size-1),
type = "b")
points(x = seq(0,1, by = 0.05),
y = quantile(sorted_random_sample, prob = seq(0,1, by = 0.05)),
col = "red")
