age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Aufgabe 3
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
View(df)
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(score1, score2, score3))
df <- df %>% mutate(score_sum = rowSums(score1:score3))
df <- df %>% mutate(score_sum = rowSums(select(df, score1:score3)))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(select(x = df, score1, score2, score3)))
df <- df %>% mutate(score_sum = rowSums(select(x = df, score1:score3)))
df <- df %>% mutate(score_sum = rowSums(select(df, score1:score3)))
View(df)
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(select(df, -id, -sex, -age)))
df <- df %>% mutate(score_sum = rowSums(select(df, score1, score2, score3)))
#Aufgabe 3
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(select(df, score1, score2, score3)))
#Aufgabe 3
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(select(score1, score2, score3)))
df <- df %>% mutate(score_sum = rowSums(select(score1, score2, score3)))
df <- df %>% mutate(score_sum = rowSums(select(score1, score2, score3)))
df <- df %>% mutate(score_sum = rowSums(select(df, score1, score2, score3)))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
f <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
View(df)
df <- df %>% mutate(score_sum = rowSums(select(df, score1, score2, score3)))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
#Add a column containing sum of all scores
df <- df %>% rowwise() %>% mutate(score_sum = sum(score1, score2, score3))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
df <- df %>% mutate(score_sum = rowSums(select(df, score1:score3)))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
#Add a column containing sum of all scores
df <- df %>% rowwise() %>% mutate(score_sum = sum(score1, score2, score3))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
#Find the values of the variables id, sex and grade sorted by the values of sex of all students who have passed.
#Uebersicht der Studenten welche bestanden haben nach Geschlecht
students_passed <- df %>% select(id, sex, grade) %>% filter(grade <= 4) %>% arrange(sex)
View(students_passed)
View(df)
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Find the values of the variables id, sex and grade sorted by the values of sex of all students who have passed.
#Uebersicht der Studenten welche bestanden haben nach Geschlecht
students_passed <- df %>% select(id, sex, grade) %>% filter(grade <= 4) %>% arrange(sex)
library("tidyverse")
library("tidyr")
library("dplyr")
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
#Add a column containing sum of all scores
df <- df %>% rowwise() %>% mutate(score_sum = sum(score1, score2, score3))
df <- df %>% mutate(score_sum = rowSums(select(df, score1:score3)))
df <- tibble(id = 1:10,
sex = sample(x = c("f", "m"), size = 10, replace = TRUE),
age = round(runif(n = 10, min = 20, max = 35)),
score1 = round(runif(n = 10, min = 0, max = 25))
)
#Select the date of all male students
selected_data <- df %>% filter(sex == "m")
#Add the data of a new student with id = 11, sex = “m”, age = 25 and score1 = 4.
df <- df %>%
add_row(id = 11, sex = "m", age = 25, score1 = 4)
#Add two columns score2 and score3 with random integer numbers between 0 and 25.
df <- df %>% mutate(score2 = sample(0:25, size = 11, replace = TRUE),
score3 = sample(0:25, size = 11, replace = TRUE))
#Add a column containing sum of all scores
df <- df %>% rowwise() %>% mutate(score_sum = sum(score1, score2, score3))
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
#Find the values of the variables id, sex and grade sorted by the values of sex of all students who have passed.
#Uebersicht der Studenten welche bestanden haben nach Geschlecht
students_passed <- df %>% select(id, sex, grade) %>% filter(grade <= 4) %>% arrange(sex)
View(df)
#Calculate the mean, minimum, maximum and median of the variable sum of scores grouped by the variable sex.
clacultaions <- df %>% group_by(sex) %>% summarise(Durchschnitt = mean(score_sum),
Minimum = min(score_sum),
Maximum = max(score_sum),
median(score_sum))
View(clacultaions)
no <- 30
exercise.results <- tibble(
stud.id = 1:no,
group = sample(x=c("A","B","C"), size=no, replace = TRUE),
ex1 = sample(x=1:10, size=no, replace = TRUE),
ex2= sample(x=1:10, size=no, replace = TRUE),
ex3 = sample(x=1:10, size=no, replace = TRUE),
ex4 = sample(x=1:10, size=no, replace = TRUE),
ex5 = sample(x=1:10, size=no, replace = TRUE)
)
View(exercise.results)
group_distribution <- exercise.results %>% group_by(group) %>% n(stud.id)
group_distribution <- exercise.results %>% group_by(group) %>% count(stud.id)
View(group_distribution)
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = n(stud.id))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(stud.id))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = n())
View(group_distribution)
#Add a column which denote the grades
df <- df %>% mutate(grade = if(score_sum <= 37) 5
else if(score_sum > 37 & score_sum <= 45) 4
else if(score_sum > 45 & score_sum <= 55) 3
else if(score_sum > 55 & score_sum <=65) 2
else (score_sum > 65))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count())
group_distribution <- exercise.results %>% group_by(group) %>% count(stud.id)
View(group_distribution)
View(group_distribution)
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = n())
View(group_distribution)
View(group_distribution)
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count())
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(stud.id))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(ex1))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(group))
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(exercise.results))
View(exercise.results)
View(group_distribution)
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = count(group))
View(group_distribution)
group_distribution <- exercise.results %>% group_by(group) %>% summarise(Anzahl = n())
View(group_distribution)
group_distribution <- exercise.results %>% count(group)
?flights
library( nycflight13)
library(nycflight13)
library(nycflight13)
install.packages("nycflights13")
library(nycflight13)
library(nycflight13)
install.packages("nycflights13")
library(nycflight13)
library("nycflight13")
flights
library("nycflights13")
flights
flights <- flights
flights
View(flights)
#Find all flights with more than 2 hours arrival delay
x <- flights %>% filter(arr_delay > 2)
library("tidyverse")
library("tidyr")
library("dplyr")
#Find all flights with more than 2 hours arrival delay
x <- flights %>% filter(arr_delay > 2)
View(x)
#Find all flights with more tahn 2 hours arrival delay and no departure delay
y <- flights %>% filter(arr_delay > 2 &  dep_delay <= 0)
View(y)
#Find all flights from United, American and Delta with no arrival delay
z <- flights %>% filter(carrier == ("UA" | "AA") & arr_delay <= 0)
#Find all flights from United, American and Delta with no arrival delay
z <- flights %>% filter(carrier == ("UA" || "AA") & arr_delay <= 0)
#Find all flights from United, American and Delta with no arrival delay
z <- flights %>% filter(carrier = ("UA" | "AA") & arr_delay <= 0)
ay
#Find all flights from United, American and Delta with no arrival delay
z <- flights %>% filter(carrier == ("UA" | "AA") & arr_delay <= 0)
#Find all flights from United, American and Delta with no arrival delay
z <- flights %>% filter((carrier == "UA" | carrier == "AA") & arr_delay <= 0)
View(z)
#Find all flights from United, American and Delta in the month
#May with more than 5 hours arrival delay sorted by carrier and flight number.
w <- flights %>% filter((carrier == "UA" | carrier == "AA" | carrier == "DL") & arr_delay >= 5) %>% arrange(carrier, flightt)
#Find all flights from United, American and Delta in the month
#May with more than 5 hours arrival delay sorted by carrier and flight number.
w <- flights %>% filter((carrier == "UA" | carrier == "AA" | carrier == "DL") & arr_delay >= 5) %>% arrange(carrier, flight)
View(w)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = (distance/hour))
View(flights)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = round((distance/hour), 2))
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = round((air_time/hour), 2))
View(flights)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = round((distance/air_time), 2))
View(flights)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = round((distance/(air_time/60), 2)))
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(speed = round((distance/air_time), 2))
flights <- flights %>% mutate(air_time_hours = air_time / 60,
speed = round((distance/air_time_hours), 2))
top10 <- flights %>% select(carrier, flight) %>% arrange(speed) %>% head()
top10 <- flights %>% select(carrier, flight) %>% arrange(speed)
View(flights)
flights <- flights %>% mutate(air_time_hours = air_time / 60
speed = round((distance/air_time_hours), 2))
View(flights)
top10 <- flights %>% select(carrier, flight) %>% arrange(speed)
flights <- flights %>% mutate(air_time_hours = air_time / 60)
flights <- flights %>% mutate(speed = round((distance/air_time_hours), 2))
View(flights)
top10 <- flights %>% select(carrier, flight) %>% arrange(speed)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(air_time_hours = round(air_time / 60))
flights <- flights %>% mutate(speed = round((distance/air_time_hours), 2))
View(flights)
#Add a column speed which denotes the average speed of the flight and determine the carrier, flight of the top 10 values of speed.
flights <- flights %>% mutate(air_time_hours = round((air_time / 60), 2))
flights <- flights %>% mutate(speed = round((distance/air_time_hours), 2))
View(flights)
top10 <- flights %>% select(carrier, flight, speed) %>% arrange(speed)
View(top10)
top10 <- flights %>% select(carrier, flight, speed) %>% arrange(desc(speed))
View(top10)
top10 <- flights %>% select(carrier, flight, speed) %>% arrange(desc(speed)) %>% head()
View(top10)
top10 <- flights %>% select(carrier, flight, speed) %>% arrange(desc(speed)) %>% head(10)
View(top10)
#Find a list of carriers with a column ratio which denotes the number of flights with arr delay less than 10 minutes
#to the total number of flights. The list should be sorted by ratio
h <- flights %>% group_by(carrier) %>% summarise(ans_flights_no_delay = filter(arr_delay < 10) %>% n())
#Find a list of carriers with a column ratio which denotes the number of flights with arr delay less than 10 minutes
#to the total number of flights. The list should be sorted by ratio
h <- flights %>% group_by(carrier) %>% summarise(ans_flights_no_delay = filter(arr_delay < 10) %>% n())
#Find a list of carriers with a column ratio which denotes the number of flights with arr delay less than 10 minutes
#to the total number of flights. The list should be sorted by ratio
h <- flights %>% group_by(carrier) %>% summarise(ans_flights_no_delay = n())
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = filter(arr_delay<10) %>% n())
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = filter(arr_delay<10))
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = n(filter(arr_delay<10)))
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = flights %>% filter(arr_delay < 10) %>% n())
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n()
ans_flights_no_delay = flights %>% filter(arr_delay < 10) %>% n())
View(flights)
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = filter(arr_delay < 10) %>% n())
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE))
View(h)
#to the total number of flights. The list should be sorted by ratio
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = ans_fligts_no_delay / ans_flights)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = ans_flights_no_delay / ans_flights)
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = round(ans_flights_no_delay / ans_flights), 2)
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = round(ans_flights_no_delay / ans_flights, 2))
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = round(ans_flights_no_delay / ans_flights, 2)) %>% arrange(ratio)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = round(ans_flights_no_delay / ans_flights, 2)) %>% arrange(ratio_delayed_flights)
View(h)
h <- flights %>% group_by(carrier) %>% summarise(ans_flights = n(),
ans_flights_no_delay = sum(arr_delay<10, na.rm = TRUE),
ratio_delayed_flights = round(ans_flights_no_delay / ans_flights, 2)) %>% arrange(desc(ratio_delayed_flights))
View(h)
airports <- airports
airlines <- airlines
View(airlines)
View(airports)
# Filter the flights dataset for the year 2013
flights_2013 <- filter(flights, year == 2013)
# Group flights by Carrier, Origin, and Destination, and count the number of flights
flight_counts <- flights_2013 %>%
group_by(carrier, origin, dest) %>%
summarise(frequency = n()) %>%
arrange(desc(frequency))
# Join with the airlines dataset to get the airline names
flight_counts_with_names <- left_join(flight_counts, airlines, by = c("carrier" = "carrier"))
# Rename columns for better clarity
colnames(flight_counts_with_names) <- c("Name der Fluggesellschaft", "Startort", "Zielort", "Häufigkeit")
# Print the resulting table sorted by frequency in descending order
print(flight_counts_with_names)
View(flight_counts)
flights_frequency <- flights <- group_by(carrier, origin, dest)
View(flights)
flights_frequency <- flights %>% group_by(carrier, origin, dest)
View(flights_frequency)
flights_2013 <- flights %>% filter(year = 2013)
flights_2013 <- flights %>% filter(year == 2013)
View(flights_2013)
flights_frequency <- flights_2013 %>% group_by(carrier, origin, dest) %>% summarise(frequency = n())
View(flights_frequency)
flights_frequency <- flights_2013 %>% group_by(carrier, origin, dest) %>% summarise(frequency = n()) %>% arrange(desc(frequency))
View(flights_frequency)
flights_frequency_with_names <- left_join(flights_frequency, airlines, by = c("carrier" = "carrier"))
View(flights_frequency)
View(flights_frequency_with_names)
flights_frequency_with_names <- flight_counts_with_names %>% relocate(name, .after = carrier)
View(flights_frequency_with_names)
flights_frequency_with_names_complete <- flight_counts_with_names %>% relocate(name, .after = carrier)
flights_frequency_with_names <- flight_counts_with_names %>% relocate(name, .after = carrier)
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(name, carrier, origin, dest, frequency)
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(name, carrier, origin, dest, frequency)
colnames(flights_frequency_with_names) <- c("Name der Fluggesellschaft", "Startort", "Zielort", "Häufigkeit")
View(flights_frequency_with_names)
colnames(flights_frequency_with_names) <- c("Kuerzel", "Startort", "Zielort", "Häufigkeit", "Name")
colnames(flights_frequency_with_names) <- c("abbr", "origin", "dest", "freq", "carrier_name")
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(abbr, carrier_name, origin, dest, freq)
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(carrier_name, origin, dest, freq)
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(abbr, carrier_name, origin, dest, freq)
library("tidyverse")
library("tidyr")
library("dplyr")
library("nycflights13")
flights_frequency_with_names_ordered <- flight_counts_with_names %>% select(abbr, carrier_name, origin, dest, freq)
View(flights_frequency_with_names)
flights_frequency_with_names_ordered <- flight_frequency_with_names %>% select(abbr, carrier_name, origin, dest, freq)
flights_frequency_with_names_ordered <- flights_frequency_with_names %>% select(abbr, carrier_name, origin, dest, freq)
View(flights_frequency_with_names)
View(flights_frequency_with_names_ordered)
